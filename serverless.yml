service: fishwrapper 

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
  customDomain:
    domainName: fish.capitalistlepton.com 
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
  apigwBinary:
    types:
      - '*/*'
plugins:
  - serverless-domain-manager
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-apigw-binary

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - s3:PutObject
        - s3:PutObjectAcl
      Resource:
        - { "Fn::GetAtt": ["PostsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["FeaturesDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["SubscribersDynamoDBtable", "Arn" ] }
        - "arn:aws:s3:::fishwrapper-pictures-dev/*"
  environment:
    POSTS_TABLE: 'posts-table-${self:provider.stage}'
    FEATS_TABLE: 'features-table-${self:provider.stage}' 
    USERS_TABLE: 'users-table-${self:provider.stage}'
    SUBSCRIBERS_TABLE: 'subscribers-table-${self:provider.stage}'
    COOKIE_SECRET: ${ssm:cookieSecret}
    S3_BUCKET: ${ssm:s3Bucket}
    PICS_BUCKET: 'fishwrapper-pictures-${self:provider.stage}'
    SOLR_SITE: ${ssm:solrSite}
    SOLR_PORT: ${ssm:solrPort}
    SOLR_CORE: '${ssm:solrCore}-${self:provider.stage}'

functions:
  app:
    handler: index.handler
    events:
      - http: 'ANY /'
      - http: 'ANY {proxy+}'

resources:
  Resources:
    PostsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: postId 
            AttributeType: S
        KeySchema:
          -
            AttributeName: postId 
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'posts-table-${self:provider.stage}'

    FeaturesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: index 
            AttributeType: N
        KeySchema:
          -
            AttributeName: index 
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'features-table-${self:provider.stage}' 

    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: user
            AttributeType: S
        KeySchema:
          -
            AttributeName: user
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'users-table-${self:provider.stage}'

    SubscribersDynamoDBtable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
             AttributeName: email 
             AttributeType: S
        KeySchema:
          -
            AttributeName: email 
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'subscribers-table-${self:provider.stage}'

